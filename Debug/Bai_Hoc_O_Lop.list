
Bai_Hoc_O_Lop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001968  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001b00  08001b00  00011b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b38  08001b38  0002062c  2**0
                  CONTENTS
  4 .ARM          00000008  08001b38  08001b38  00011b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b40  08001b40  0002062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b44  08001b44  00011b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000400  08001b48  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00001464  2000062c  08001d74  0002062c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a90  08001d74  00021a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002062c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b06  00000000  00000000  0002065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f23  00000000  00000000  00024162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00025088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  000254d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b79  00000000  00000000  000258a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b65  00000000  00000000  0003a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fda  00000000  00000000  0003ef7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001038  00000000  00000000  000c0fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000062c 	.word	0x2000062c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001adc 	.word	0x08001adc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000630 	.word	0x20000630
 80001d4:	08001adc 	.word	0x08001adc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <I2C_Init>:

#include "main.h"
#include "i2c_lib.h"

void I2C_Init()
{
 80004dc:	b480      	push	{r7}
 80004de:	b089      	sub	sp, #36	; 0x24
 80004e0:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <I2C_Init+0xc8>)
 80004e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ea:	4a2e      	ldr	r2, [pc, #184]	; (80005a4 <I2C_Init+0xc8>)
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f0:	6413      	str	r3, [r2, #64]	; 0x40
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <I2C_Init+0xc8>)
 80004f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <I2C_Init+0xc8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a27      	ldr	r2, [pc, #156]	; (80005a4 <I2C_Init+0xc8>)
 8000508:	f043 0302 	orr.w	r3, r3, #2
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <I2C_Init+0xc8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]


	uint32_t* GPIOB_MODER = (uint32_t*)0x40020400;
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <I2C_Init+0xcc>)
 800051c:	61fb      	str	r3, [r7, #28]
	*GPIOB_MODER |= (0b10 << 12) | (0b10 << 18);
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 2202 	orr.w	r2, r3, #532480	; 0x82000
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	601a      	str	r2, [r3, #0]

	//uint32_t* GPIOB_PUPDR = (uint32_t*)0x4002040c;
	//*GPIOB_PUPDR |= (0b01 << 12) | (0b01 << 18);
	uint32_t* GPIOB_AFRL = (uint32_t*)0x40020420;
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <I2C_Init+0xd0>)
 800052c:	61bb      	str	r3, [r7, #24]
	*GPIOB_AFRL &= ~(0b1111 << 24);
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |= (0b0100 << 24);
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	601a      	str	r2, [r3, #0]

	uint32_t* GPIOB_AFRH = (uint32_t*)0x40020424;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <I2C_Init+0xd4>)
 8000548:	617b      	str	r3, [r7, #20]
	*GPIOB_AFRH &= ~(0b1111 << 4);
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= (0b0100 << 4);
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	601a      	str	r2, [r3, #0]

	uint32_t* I2C1_CR1 = (uint32_t*)0x40005400;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <I2C_Init+0xd8>)
 8000564:	613b      	str	r3, [r7, #16]
	*I2C1_CR1 &= ~(0b1 << 0);         				// disable i2c before setup i2c
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f023 0201 	bic.w	r2, r3, #1
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	601a      	str	r2, [r3, #0]
	uint32_t* I2C1_CR2 = (uint32_t*)0x40005404;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <I2C_Init+0xdc>)
 8000574:	60fb      	str	r3, [r7, #12]
	*I2C1_CR2 |= 16; 								// config peripheral clock 16MHZ
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f043 0210 	orr.w	r2, r3, #16
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	601a      	str	r2, [r3, #0]
	uint32_t* I2C1_CCR = (uint32_t*)0x4000541c;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <I2C_Init+0xe0>)
 8000584:	60bb      	str	r3, [r7, #8]
	*I2C1_CCR = 80; 								// set clock 16Mhz / 80 = 200Mhz
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	2250      	movs	r2, #80	; 0x50
 800058a:	601a      	str	r2, [r3, #0]

	*I2C1_CR1 |= (0b1 << 0); 						// enable i2c
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f043 0201 	orr.w	r2, r3, #1
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	601a      	str	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	3724      	adds	r7, #36	; 0x24
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020420 	.word	0x40020420
 80005b0:	40020424 	.word	0x40020424
 80005b4:	40005400 	.word	0x40005400
 80005b8:	40005404 	.word	0x40005404
 80005bc:	4000541c 	.word	0x4000541c

080005c0 <I2C_read_LSM>:
char I2C_read_LSM(char addr)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b08b      	sub	sp, #44	; 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	uint32_t* CR1  = (uint32_t*)0x40005400;
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <I2C_read_LSM+0xd8>)
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* DR   = (uint32_t*)0x40005410;
 80005ce:	4b33      	ldr	r3, [pc, #204]	; (800069c <I2C_read_LSM+0xdc>)
 80005d0:	623b      	str	r3, [r7, #32]
	uint32_t* SR1  = (uint32_t*)0x40005414;
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <I2C_read_LSM+0xe0>)
 80005d4:	61fb      	str	r3, [r7, #28]
	uint32_t* SR2  = (uint32_t*)0x40005418;
 80005d6:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <I2C_read_LSM+0xe4>)
 80005d8:	61bb      	str	r3, [r7, #24]

	const uint8_t address_sensor = 0b0011001 << 1; 	// address sensor
 80005da:	2332      	movs	r3, #50	; 0x32
 80005dc:	75fb      	strb	r3, [r7, #23]

	//while(((*SR2 >> 1) & 1) != 1); 					// check bit BUSY

	*CR1 |= (0b1 << 8);
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	601a      	str	r2, [r3, #0]
	while(((*SR1 >> 0) & 1) != 1); 					// check  Start condition generated
 80005ea:	bf00      	nop
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <I2C_read_LSM+0x2c>
	*DR = address_sensor | 0;
 80005f8:	7dfa      	ldrb	r2, [r7, #23]
 80005fa:	6a3b      	ldr	r3, [r7, #32]
 80005fc:	601a      	str	r2, [r3, #0]
	while(((*SR1 >> 1) & 1) != 1); 					// check address is send
 80005fe:	bf00      	nop
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	085b      	lsrs	r3, r3, #1
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f8      	beq.n	8000600 <I2C_read_LSM+0x40>
	uint32_t temp = *SR2;
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	613b      	str	r3, [r7, #16]

	*DR = addr;
 8000614:	79fa      	ldrb	r2, [r7, #7]
 8000616:	6a3b      	ldr	r3, [r7, #32]
 8000618:	601a      	str	r2, [r3, #0]
	while(((*SR1 >> 2) & 1) != 1);					// Data byte transfer succeeded
 800061a:	bf00      	nop
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f8      	beq.n	800061c <I2C_read_LSM+0x5c>
	while(((*SR1 >> 10) & 1) == 1);					// check ACK
 800062a:	bf00      	nop
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	0a9b      	lsrs	r3, r3, #10
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f8      	bne.n	800062c <I2C_read_LSM+0x6c>

	*CR1 |= (0b1 << 8);
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	601a      	str	r2, [r3, #0]
	while(((*SR1 >> 0) & 1) != 1);
 8000646:	bf00      	nop
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f9      	beq.n	8000648 <I2C_read_LSM+0x88>
	*DR = address_sensor | 1;
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	601a      	str	r2, [r3, #0]
	while(((*SR1 >> 1) & 1) != 1); 					// check address is send
 8000662:	bf00      	nop
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f8      	beq.n	8000664 <I2C_read_LSM+0xa4>
	temp = *SR2;
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	613b      	str	r3, [r7, #16]

	uint8_t data = *DR;
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]

	*CR1 |= (0b1 << 9);
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	601a      	str	r2, [r3, #0]
	return data;
 800068a:	7bfb      	ldrb	r3, [r7, #15]
}
 800068c:	4618      	mov	r0, r3
 800068e:	372c      	adds	r7, #44	; 0x2c
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40005400 	.word	0x40005400
 800069c:	40005410 	.word	0x40005410
 80006a0:	40005414 	.word	0x40005414
 80006a4:	40005418 	.word	0x40005418

080006a8 <GPIO_Init>:
char ESP32_CIPSTART[] = "AT+CIPSTART=\"TCP\",""\"192.168.2.9\",""1234\r\n";
char ESP32_CIPSEND[] = "AT+CIPSEND=3\r\n";


void GPIO_Init()
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <GPIO_Init+0x98>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <GPIO_Init+0x98>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <GPIO_Init+0x98>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <GPIO_Init+0x98>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <GPIO_Init+0x98>)
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <GPIO_Init+0x98>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

	// thanh ghi moder
	uint32_t* GPIOA_MODER = (uint32_t*)(0x40020000);
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <GPIO_Init+0x9c>)
 80006e8:	617b      	str	r3, [r7, #20]
	*GPIOA_MODER &= ~(0b11 << 0);
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 0203 	bic.w	r2, r3, #3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOD_MODER = (uint32_t*)(0x40020c00);
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <GPIO_Init+0xa0>)
 80006f8:	613b      	str	r3, [r7, #16]
	*GPIOD_MODER &= ~(0xff << 0);//  su dung 4 led
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30);
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	601a      	str	r2, [r3, #0]

	//thanh ghi pupdr
	uint32_t* GPIOA_PUPDR = (uint32_t*)(0x4002000c);
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <GPIO_Init+0xa4>)
 8000714:	60fb      	str	r3, [r7, #12]
	*GPIOA_PUPDR &= ~(0b1 << 0);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f023 0201 	bic.w	r2, r3, #1
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	601a      	str	r2, [r3, #0]

	//thanh ghi  otyper
	uint32_t* GPIOD_OTYPER = (uint32_t*)(0x40020c04);
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <GPIO_Init+0xa8>)
 8000724:	60bb      	str	r3, [r7, #8]
	*GPIOD_OTYPER &= ~(0xf << 12);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	371c      	adds	r7, #28
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	40020c00 	.word	0x40020c00
 800074c:	4002000c 	.word	0x4002000c
 8000750:	40020c04 	.word	0x40020c04

08000754 <EXTI0_Init>:

// khoi tao interrput

void EXTI0_Init()
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
	// khoi tao trong EXTI0
	uint32_t* EXTICR1 = (uint32_t*)(0x40013808);
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <EXTI0_Init+0x54>)
 800075c:	60fb      	str	r3, [r7, #12]
	*EXTICR1 &= ~(0xf << 0);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f023 020f 	bic.w	r2, r3, #15
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	601a      	str	r2, [r3, #0]
	uint32_t* FTSR = (uint32_t*)(0x40013c0c);
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <EXTI0_Init+0x58>)
 800076c:	60bb      	str	r3, [r7, #8]
	*FTSR |= 0b1 << 0;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0201 	orr.w	r2, r3, #1
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	601a      	str	r2, [r3, #0]
	uint32_t* IMR = (uint32_t*)(0x40013c00);
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <EXTI0_Init+0x5c>)
 800077c:	607b      	str	r3, [r7, #4]
	*IMR |= 0b1 << 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f043 0201 	orr.w	r2, r3, #1
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]

	// khoi tao trong NVIC trong ARM cotrex
	uint32_t* NVIC_ISER0 = (uint32_t*)(0xe000e100);
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <EXTI0_Init+0x60>)
 800078c:	603b      	str	r3, [r7, #0]
	*NVIC_ISER0 |= (0b1 << 6);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40013808 	.word	0x40013808
 80007ac:	40013c0c 	.word	0x40013c0c
 80007b0:	40013c00 	.word	0x40013c00
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <delay_init>:
unsigned int  tick;
uint32_t* SYST_CR = (uint32_t*)(0xE000E010);
uint32_t* SYST_RV = (uint32_t*)(0xE000E014);
void delay_init()
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	*SYST_RV = 16000 / 8 - 1;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <delay_init+0x28>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80007c4:	601a      	str	r2, [r3, #0]
	*SYST_CR |= 1 | (1 << 1); // enable timer 1 |  enable interrupt timer
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <delay_init+0x2c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <delay_init+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f042 0203 	orr.w	r2, r2, #3
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	20000484 	.word	0x20000484
 80007e4:	20000480 	.word	0x20000480

080007e8 <delay>:
void delay(unsigned int time)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	tick = 0;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <delay+0x28>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
	while(tick < time);
 80007f6:	bf00      	nop
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <delay+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d8fa      	bhi.n	80007f8 <delay+0x10>
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	20001a84 	.word	0x20001a84

08000814 <Systick_custom_Handler>:


void Systick_custom_Handler()
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
	tick++;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <Systick_custom_Handler+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a07      	ldr	r2, [pc, #28]	; (800083c <Systick_custom_Handler+0x28>)
 8000820:	6013      	str	r3, [r2, #0]
	*SYST_CR &= ~(1 << 16);
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <Systick_custom_Handler+0x2c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <Systick_custom_Handler+0x2c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20001a84 	.word	0x20001a84
 8000840:	20000480 	.word	0x20000480

08000844 <led_control>:

void led_control(int led_num, State_t state)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
	uint32_t* GPIOD_ODR = (uint32_t*)(0x40020c14);
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <led_control+0x50>)
 8000852:	60fb      	str	r3, [r7, #12]
	if(state == LED_ON)
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d10a      	bne.n	8000870 <led_control+0x2c>
	{
		*GPIOD_ODR |= (0b1 << (12 + led_num));
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	320c      	adds	r2, #12
 8000862:	2101      	movs	r1, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	431a      	orrs	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOD_ODR &= ~(0b1 << (12 + led_num));
	}
}
 800086e:	e00a      	b.n	8000886 <led_control+0x42>
		*GPIOD_ODR &= ~(0b1 << (12 + led_num));
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	320c      	adds	r2, #12
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	43d2      	mvns	r2, r2
 8000880:	401a      	ands	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	601a      	str	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40020c14 	.word	0x40020c14

08000898 <UART_Send_byte>:
	return (*GPIOD_IDR & 1);
}


void UART_Send_byte(char data)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	uint32_t* UART2_SR = (uint32_t*)0x40004400;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <UART_Send_byte+0x48>)
 80008a4:	60fb      	str	r3, [r7, #12]
	uint32_t* UART2_DR = (uint32_t*)0x40004404;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <UART_Send_byte+0x4c>)
 80008a8:	60bb      	str	r3, [r7, #8]

	//set TXE if TXE set 1 to return;
	while(((*UART2_SR >> 7) & 1) != 1);
 80008aa:	bf00      	nop
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	09db      	lsrs	r3, r3, #7
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f8      	beq.n	80008ac <UART_Send_byte+0x14>
	*UART2_DR = data;
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	601a      	str	r2, [r3, #0]
	// set TC if TC set 0 to return
	while(((*UART2_SR >> 6) & 1) != 0);
 80008c0:	bf00      	nop
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	099b      	lsrs	r3, r3, #6
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f8      	bne.n	80008c2 <UART_Send_byte+0x2a>
	//*UART2_SR &= ~(1 << 6);
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40004404 	.word	0x40004404

080008e8 <UART_Send_ARR>:

void UART_Send_ARR(char* arr, int num)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < num; i++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e009      	b.n	800090c <UART_Send_ARR+0x24>
	{
		UART_Send_byte(arr[i]);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ffc9 	bl	8000898 <UART_Send_byte>
	for(int i = 0; i < num; i++)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf1      	blt.n	80008f8 <UART_Send_ARR+0x10>
	}
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <EXTI0_Custom_Handler>:

void EXTI0_Custom_Handler()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

	dem++;
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <EXTI0_Custom_Handler+0xa0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	4a24      	ldr	r2, [pc, #144]	; (80009c0 <EXTI0_Custom_Handler+0xa0>)
 800092e:	6013      	str	r3, [r2, #0]
	if(dem % 2 == 0)
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <EXTI0_Custom_Handler+0xa0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d11c      	bne.n	8000976 <EXTI0_Custom_Handler+0x56>
	{
		led_control(0, LED_ON);
 800093c:	2101      	movs	r1, #1
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ff80 	bl	8000844 <led_control>
		led_control(1, LED_ON);
 8000944:	2101      	movs	r1, #1
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff ff7c 	bl	8000844 <led_control>
		led_control(2, LED_ON);
 800094c:	2101      	movs	r1, #1
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff ff78 	bl	8000844 <led_control>
		led_control(3, LED_ON);
 8000954:	2101      	movs	r1, #1
 8000956:	2003      	movs	r0, #3
 8000958:	f7ff ff74 	bl	8000844 <led_control>
		UART_Send_ARR(ESP32_AT, sizeof(ESP32_AT));
 800095c:	2105      	movs	r1, #5
 800095e:	4819      	ldr	r0, [pc, #100]	; (80009c4 <EXTI0_Custom_Handler+0xa4>)
 8000960:	f7ff ffc2 	bl	80008e8 <UART_Send_ARR>
		UART_Send_ARR(ESP32_MODE, sizeof(ESP32_MODE));
 8000964:	210e      	movs	r1, #14
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <EXTI0_Custom_Handler+0xa8>)
 8000968:	f7ff ffbe 	bl	80008e8 <UART_Send_ARR>
		UART_Send_ARR(ESP32_CWJAP, sizeof(ESP32_CWJAP));
 800096c:	212a      	movs	r1, #42	; 0x2a
 800096e:	4817      	ldr	r0, [pc, #92]	; (80009cc <EXTI0_Custom_Handler+0xac>)
 8000970:	f7ff ffba 	bl	80008e8 <UART_Send_ARR>
 8000974:	e017      	b.n	80009a6 <EXTI0_Custom_Handler+0x86>
;

	}
	else
	{
		UART_Send_ARR(ESP32_CIPSTART, sizeof(ESP32_CIPSTART));
 8000976:	2127      	movs	r1, #39	; 0x27
 8000978:	4815      	ldr	r0, [pc, #84]	; (80009d0 <EXTI0_Custom_Handler+0xb0>)
 800097a:	f7ff ffb5 	bl	80008e8 <UART_Send_ARR>
		UART_Send_ARR(ESP32_CIPSEND, sizeof(ESP32_CIPSEND));
 800097e:	210f      	movs	r1, #15
 8000980:	4814      	ldr	r0, [pc, #80]	; (80009d4 <EXTI0_Custom_Handler+0xb4>)
 8000982:	f7ff ffb1 	bl	80008e8 <UART_Send_ARR>
		//memset(rx_buf, 0, 255);
		led_control(0, LED_OFF);
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ff5b 	bl	8000844 <led_control>
		led_control(1, LED_OFF);
 800098e:	2100      	movs	r1, #0
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff ff57 	bl	8000844 <led_control>
	    led_control(2, LED_OFF);
 8000996:	2100      	movs	r1, #0
 8000998:	2002      	movs	r0, #2
 800099a:	f7ff ff53 	bl	8000844 <led_control>
		led_control(3, LED_OFF);
 800099e:	2100      	movs	r1, #0
 80009a0:	2003      	movs	r0, #3
 80009a2:	f7ff ff4f 	bl	8000844 <led_control>
	}
	uint32_t* PR = (uint32_t*)(0x40013c14);
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <EXTI0_Custom_Handler+0xb8>)
 80009a8:	607b      	str	r3, [r7, #4]
	*PR |= (0b1 << 0);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f043 0201 	orr.w	r2, r3, #1
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000400 	.word	0x20000400
 80009c4:	20000404 	.word	0x20000404
 80009c8:	2000040c 	.word	0x2000040c
 80009cc:	2000041c 	.word	0x2000041c
 80009d0:	20000448 	.word	0x20000448
 80009d4:	20000470 	.word	0x20000470
 80009d8:	40013c14 	.word	0x40013c14

080009dc <UART2_custom_Handler>:

void UART2_custom_Handler()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	uint32_t* UART2_DR = (uint32_t*)0x40004404;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <UART2_custom_Handler+0xac>)
 80009e4:	607b      	str	r3, [r7, #4]
	rx_buf[rx_index] = *UART2_DR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <UART2_custom_Handler+0xb0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	b2d1      	uxtb	r1, r2
 80009f0:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <UART2_custom_Handler+0xb4>)
 80009f2:	54d1      	strb	r1, [r2, r3]
	rx_index++;
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <UART2_custom_Handler+0xb0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <UART2_custom_Handler+0xb0>)
 80009fc:	6013      	str	r3, [r2, #0]

	if(strstr(rx_buf, "on") != 0)
 80009fe:	4925      	ldr	r1, [pc, #148]	; (8000a94 <UART2_custom_Handler+0xb8>)
 8000a00:	4823      	ldr	r0, [pc, #140]	; (8000a90 <UART2_custom_Handler+0xb4>)
 8000a02:	f001 f855 	bl	8001ab0 <strstr>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d019      	beq.n	8000a40 <UART2_custom_Handler+0x64>
	{
		led_control(0, LED_ON);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff ff18 	bl	8000844 <led_control>
		led_control(1, LED_ON);
 8000a14:	2101      	movs	r1, #1
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff ff14 	bl	8000844 <led_control>
		led_control(2, LED_ON);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff ff10 	bl	8000844 <led_control>
		led_control(3, LED_ON);
 8000a24:	2101      	movs	r1, #1
 8000a26:	2003      	movs	r0, #3
 8000a28:	f7ff ff0c 	bl	8000844 <led_control>
		memset(rx_buf, 0, sizeof(rx_buf));
 8000a2c:	f241 4238 	movw	r2, #5176	; 0x1438
 8000a30:	2100      	movs	r1, #0
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <UART2_custom_Handler+0xb4>)
 8000a34:	f001 f834 	bl	8001aa0 <memset>
		rx_index = 0;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <UART2_custom_Handler+0xb0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
		led_control(2, LED_OFF);
		led_control(3, LED_OFF);
		memset(rx_buf, 0, sizeof(rx_buf));
		rx_index = 0;
	}
}
 8000a3e:	e01f      	b.n	8000a80 <UART2_custom_Handler+0xa4>
	else if(strstr(rx_buf, "off") != 0)
 8000a40:	4915      	ldr	r1, [pc, #84]	; (8000a98 <UART2_custom_Handler+0xbc>)
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <UART2_custom_Handler+0xb4>)
 8000a44:	f001 f834 	bl	8001ab0 <strstr>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d018      	beq.n	8000a80 <UART2_custom_Handler+0xa4>
		led_control(0, LED_OFF);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fef7 	bl	8000844 <led_control>
		led_control(1, LED_OFF);
 8000a56:	2100      	movs	r1, #0
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fef3 	bl	8000844 <led_control>
		led_control(2, LED_OFF);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff feef 	bl	8000844 <led_control>
		led_control(3, LED_OFF);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f7ff feeb 	bl	8000844 <led_control>
		memset(rx_buf, 0, sizeof(rx_buf));
 8000a6e:	f241 4238 	movw	r2, #5176	; 0x1438
 8000a72:	2100      	movs	r1, #0
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <UART2_custom_Handler+0xb4>)
 8000a76:	f001 f813 	bl	8001aa0 <memset>
		rx_index = 0;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <UART2_custom_Handler+0xb0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004404 	.word	0x40004404
 8000a8c:	20001a80 	.word	0x20001a80
 8000a90:	20000648 	.word	0x20000648
 8000a94:	08001b00 	.word	0x08001b00
 8000a98:	08001b04 	.word	0x08001b04

08000a9c <Flash_to_Ram>:
void Flash_to_Ram()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
	memcpy((void*)0x20000000, 0, 0x198);// copy vector table size 0 -> 0x198
 8000aa2:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000aac:	f000 ffea 	bl	8001a84 <memcpy>
	uint32_t* VTOR = (uint32_t*)0xe000ed08; // enable vector table
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <Flash_to_Ram+0x54>)
 8000ab2:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000; //in Ram
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000aba:	601a      	str	r2, [r3, #0]

	// custom exti0
	uint32_t* EXTI0_Address_Custom = (uint32_t*) 0x20000058;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <Flash_to_Ram+0x58>)
 8000abe:	60bb      	str	r3, [r7, #8]
	*EXTI0_Address_Custom = (uint32_t)EXTI0_Custom_Handler | 1;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <Flash_to_Ram+0x5c>)
 8000ac2:	f043 0201 	orr.w	r2, r3, #1
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	601a      	str	r2, [r3, #0]

	//custom Systick
	uint32_t* Systick_address_Custom = (uint32_t*) 0x2000003C;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <Flash_to_Ram+0x60>)
 8000acc:	607b      	str	r3, [r7, #4]
	*Systick_address_Custom = (uint32_t)Systick_custom_Handler | 1;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <Flash_to_Ram+0x64>)
 8000ad0:	f043 0201 	orr.w	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]

	// custom UART2
	uint32_t* UART2_address_Custom = (uint32_t*) 0x200000D8;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <Flash_to_Ram+0x68>)
 8000ada:	603b      	str	r3, [r7, #0]
	*UART2_address_Custom = (uint32_t)UART2_custom_Handler | 1;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <Flash_to_Ram+0x6c>)
 8000ade:	f043 0201 	orr.w	r2, r3, #1
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	601a      	str	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000ed08 	.word	0xe000ed08
 8000af4:	20000058 	.word	0x20000058
 8000af8:	08000921 	.word	0x08000921
 8000afc:	2000003c 	.word	0x2000003c
 8000b00:	08000815 	.word	0x08000815
 8000b04:	200000d8 	.word	0x200000d8
 8000b08:	080009dd 	.word	0x080009dd

08000b0c <UART_Init>:

void UART_Init()
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <UART_Init+0xa4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a25      	ldr	r2, [pc, #148]	; (8000bb0 <UART_Init+0xa4>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <UART_Init+0xa4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <UART_Init+0xa4>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <UART_Init+0xa4>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <UART_Init+0xa4>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

	uint32_t* GPIOA_MODER = (uint32_t*)0x40020000;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <UART_Init+0xa8>)
 8000b4c:	61fb      	str	r3, [r7, #28]
	*GPIOA_MODER &= ~(0b1111 << 4); // set PIN2,3
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 4) | (0b10 << 6);// Pin2,3 Analog
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOA_AFRL = (uint32_t*)0x40020020;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <UART_Init+0xac>)
 8000b68:	61bb      	str	r3, [r7, #24]
	*GPIOA_AFRL |= (7 << 8) | (7 << 12);
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	601a      	str	r2, [r3, #0]

	// set baud rate 9600
	uint32_t* UART2_BRR = (uint32_t*)0x40004408;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <UART_Init+0xb0>)
 8000b78:	617b      	str	r3, [r7, #20]
	*UART2_BRR = (8 << 4) | 11;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	228b      	movs	r2, #139	; 0x8b
 8000b7e:	601a      	str	r2, [r3, #0]

	//set 13 enable UART, set 2 r/w enable TX, set 3 r/w enable RX
	// set 5 enable Interrupt of UART
	//size 8 byte and check chan le
	uint32_t* UART2_CR1 = (uint32_t*)0x4000440c;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <UART_Init+0xb4>)
 8000b82:	613b      	str	r3, [r7, #16]
	*UART2_CR1 |= (0b1 << 13) | (0b1 << 2) | (0b1 << 3);// | (0b1 << 5);
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b8c:	f043 030c 	orr.w	r3, r3, #12
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	6013      	str	r3, [r2, #0]

	//set enable DMA of UART
	uint32_t* UART2_CR3 = (uint32_t*)0x40004414;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <UART_Init+0xb8>)
 8000b96:	60fb      	str	r3, [r7, #12]
	*UART2_CR3 |= (0b1 << 6);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	3724      	adds	r7, #36	; 0x24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020020 	.word	0x40020020
 8000bbc:	40004408 	.word	0x40004408
 8000bc0:	4000440c 	.word	0x4000440c
 8000bc4:	40004414 	.word	0x40004414

08000bc8 <DMA_Init>:

void DMA_Init()
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <DMA_Init+0x7c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <DMA_Init+0x7c>)
 8000bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <DMA_Init+0x7c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
	// stream 5 enable
	uint32_t* DMA1_S5PAR = (uint32_t*)0x40026090;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <DMA_Init+0x80>)
 8000bec:	617b      	str	r3, [r7, #20]
	*DMA1_S5PAR = 0x40004404;// read data of UART
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <DMA_Init+0x84>)
 8000bf2:	601a      	str	r2, [r3, #0]

	uint32_t* DMA1_S5NDTR = (uint32_t*)0x4002608c;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <DMA_Init+0x88>)
 8000bf6:	613b      	str	r3, [r7, #16]
	*DMA1_S5NDTR = sizeof(rx_buf); // read size of data
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	f241 4238 	movw	r2, #5176	; 0x1438
 8000bfe:	601a      	str	r2, [r3, #0]

	uint32_t* DMA1_S5M0AR = (uint32_t*)0x40026094;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <DMA_Init+0x8c>)
 8000c02:	60fb      	str	r3, [r7, #12]
	*DMA1_S5M0AR = (uint32_t)rx_buf;// read on RAM
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <DMA_Init+0x90>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	601a      	str	r2, [r3, #0]
	// set 25 enable channel 4
	// set 10 increment on 1 ex: var[0], var[1], var[2] ...
	// set 8 Circular mode
	// set 4 read data full the interrupt enable complete
	// set 0 enable DMA
	uint32_t* DMA1_S5CR = (uint32_t*)0x40026088;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <DMA_Init+0x94>)
 8000c0c:	60bb      	str	r3, [r7, #8]
	*DMA1_S5CR &= ~(0b111 << 25);
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	601a      	str	r2, [r3, #0]
	*DMA1_S5CR |= (4 << 25) | (0b1 << 10)| (0b1 << 8) | (0b1 << 4) | (0b1 << 0);
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <DMA_Init+0x98>)
 8000c20:	4313      	orrs	r3, r2
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	6013      	str	r3, [r2, #0]

	// set NVIC interrupt Cortex_M4 DMA
	uint32_t* NVIC_ISER0 = (uint32_t*)0xe000e100;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <DMA_Init+0x9c>)
 8000c28:	607b      	str	r3, [r7, #4]
	*NVIC_ISER0 |= (0b1 << 16);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40026090 	.word	0x40026090
 8000c4c:	40004404 	.word	0x40004404
 8000c50:	4002608c 	.word	0x4002608c
 8000c54:	40026094 	.word	0x40026094
 8000c58:	20000648 	.word	0x20000648
 8000c5c:	40026088 	.word	0x40026088
 8000c60:	08000511 	.word	0x08000511
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <DMA1_Stream5_IRQHandler>:

	*FLASH_CR &= ~(0b1 << 0);
}
int recv_done = 0;
void DMA1_Stream5_IRQHandler()
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
	recv_done = 1;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <DMA1_Stream5_IRQHandler+0x2c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
	__asm("NOP");
 8000c74:	bf00      	nop

	uint32_t* HIFCR = (uint32_t*)0x4002600C;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <DMA1_Stream5_IRQHandler+0x30>)
 8000c78:	607b      	str	r3, [r7, #4]
	*HIFCR |= (0b1 << 11);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20001a88 	.word	0x20001a88
 8000c98:	4002600c 	.word	0x4002600c

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca2:	f000 f94f 	bl	8000f44 <HAL_Init>
  GPIO_Init();
 8000ca6:	f7ff fcff 	bl	80006a8 <GPIO_Init>
  EXTI0_Init();
 8000caa:	f7ff fd53 	bl	8000754 <EXTI0_Init>
  delay_init();
 8000cae:	f7ff fd83 	bl	80007b8 <delay_init>
  Flash_to_Ram();
 8000cb2:	f7ff fef3 	bl	8000a9c <Flash_to_Ram>
  UART_Init();
 8000cb6:	f7ff ff29 	bl	8000b0c <UART_Init>
  DMA_Init();
 8000cba:	f7ff ff85 	bl	8000bc8 <DMA_Init>
  //SPI_Init();
  I2C_Init();
 8000cbe:	f7ff fc0d 	bl	80004dc <I2C_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f833 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f000 f88f 	bl	8000de8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  char msg[] = "Hello PC! we  are the STM32 \r\n";
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <main+0x88>)
 8000ccc:	463c      	mov	r4, r7
 8000cce:	461d      	mov	r5, r3
 8000cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cd8:	c407      	stmia	r4!, {r0, r1, r2}
 8000cda:	8023      	strh	r3, [r4, #0]
 8000cdc:	3402      	adds	r4, #2
 8000cde:	0c1b      	lsrs	r3, r3, #16
 8000ce0:	7023      	strb	r3, [r4, #0]
  //uint32_t sensor_id = SPI_Sensor_Read(WHO_I_AM);
  //(void)sensor_id;
  //SPI_Sensor_Write(CTRL_REG1, 0b00001111);
 // uint32_t sensor_ctrl = SPI_Sensor_Read(CTRL_REG1);
  //(void)sensor_ctrl;
  uint8_t sensor2_i2c_sensor = I2C_read_LSM(WHO_AM_I_A);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f7ff fc6c 	bl	80005c0 <I2C_read_LSM>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	77fb      	strb	r3, [r7, #31]
  delay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf0:	f7ff fd7a 	bl	80007e8 <delay>
  while (1)
  {
    /* USER CODE END WHILE */
/*	  UART_Send_ARR(msg, sizeof(msg));
	  delay(1000);*/
	  if(recv_done == 1)
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <main+0x8c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <main+0x64>
	  {
		  update_sector();
 8000cfc:	f000 fefc 	bl	8001af8 <__update_sector_veneer>
	  }
	  led_control(0, LED_ON);
 8000d00:	2101      	movs	r1, #1
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fd9e 	bl	8000844 <led_control>
	  delay(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f7ff fd6c 	bl	80007e8 <delay>
	  led_control(0, LED_OFF);
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fd96 	bl	8000844 <led_control>
	  delay(1000);
 8000d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1c:	f7ff fd64 	bl	80007e8 <delay>
	  if(recv_done == 1)
 8000d20:	e7e8      	b.n	8000cf4 <main+0x58>
 8000d22:	bf00      	nop
 8000d24:	08001b08 	.word	0x08001b08
 8000d28:	20001a88 	.word	0x20001a88

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	; 0x50
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	2230      	movs	r2, #48	; 0x30
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 feb0 	bl	8001aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <SystemClock_Config+0xb4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <SystemClock_Config+0xb4>)
 8000d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <SystemClock_Config+0xb4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <SystemClock_Config+0xb8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <SystemClock_Config+0xb8>)
 8000d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <SystemClock_Config+0xb8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2310      	movs	r3, #16
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fa29 	bl	80011f4 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000da8:	f000 f838 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fc8c 	bl	80016e4 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000dd2:	f000 f823 	bl	8000e1c <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3750      	adds	r7, #80	; 0x50
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40007000 	.word	0x40007000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_GPIO_Init+0x30>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <MX_GPIO_Init+0x30>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_GPIO_Init+0x30>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f890 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd7 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f000 fd8d 	bl	8001a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff febb 	bl	8000c9c <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8000f30:	2000062c 	.word	0x2000062c
  ldr r2, =_sidata
 8000f34:	08001b48 	.word	0x08001b48
  ldr r2, =_sbss
 8000f38:	2000062c 	.word	0x2000062c
  ldr r4, =_ebss
 8000f3c:	20001a90 	.word	0x20001a90

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f90d 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff ff56 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f917 	bl	80011da <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f8ed 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000488 	.word	0x20000488
 8000fe0:	20000490 	.word	0x20000490
 8000fe4:	2000048c 	.word	0x2000048c

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000490 	.word	0x20000490
 800100c:	20001a8c 	.word	0x20001a8c

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20001a8c 	.word	0x20001a8c

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff47 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5c 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb0 	bl	8001148 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e267      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d075      	beq.n	80012fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b04      	cmp	r3, #4
 800121c:	d00c      	beq.n	8001238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121e:	4b85      	ldr	r3, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d112      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b82      	ldr	r3, [pc, #520]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001236:	d10b      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	4b7e      	ldr	r3, [pc, #504]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d05b      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d157      	bne.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e242      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d106      	bne.n	8001268 <HAL_RCC_OscConfig+0x74>
 800125a:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a75      	ldr	r2, [pc, #468]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x98>
 8001272:	4b70      	ldr	r3, [pc, #448]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6f      	ldr	r2, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6c      	ldr	r2, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 800128c:	4b69      	ldr	r3, [pc, #420]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a68      	ldr	r2, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff feb0 	bl	8001010 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff feac 	bl	8001010 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e207      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xc0>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fe9c 	bl	8001010 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fe98 	bl	8001010 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1f3      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130a:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11c      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1c7      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e03a      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_RCC_OscConfig+0x244>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fe51 	bl	8001010 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fe4d 	bl	8001010 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1a8      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e015      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_RCC_OscConfig+0x244>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fe30 	bl	8001010 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fe2c 	bl	8001010 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e187      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d036      	beq.n	800144c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d016      	beq.n	8001414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_RCC_OscConfig+0x248>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fe10 	bl	8001010 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fe0c 	bl	8001010 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e167      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x200>
 8001412:	e01b      	b.n	800144c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_OscConfig+0x248>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fdf9 	bl	8001010 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	e00e      	b.n	8001440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fdf5 	bl	8001010 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d907      	bls.n	8001440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e150      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
 8001434:	40023800 	.word	0x40023800
 8001438:	42470000 	.word	0x42470000
 800143c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ea      	bne.n	8001422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8097 	beq.w	8001588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b81      	ldr	r3, [pc, #516]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a7c      	ldr	r2, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b77      	ldr	r3, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a73      	ldr	r2, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fdb5 	bl	8001010 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fdb1 	bl	8001010 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e10c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x2ea>
 80014d0:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	e01c      	b.n	8001518 <HAL_RCC_OscConfig+0x324>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x30c>
 80014e6:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5b      	ldr	r2, [pc, #364]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0x324>
 8001500:	4b58      	ldr	r3, [pc, #352]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a57      	ldr	r2, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a54      	ldr	r2, [pc, #336]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fd76 	bl	8001010 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	e00a      	b.n	800153e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fd72 	bl	8001010 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0cb      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0ee      	beq.n	8001528 <HAL_RCC_OscConfig+0x334>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fd60 	bl	8001010 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fd5c 	bl	8001010 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0b5      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ee      	bne.n	8001554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a1 	beq.w	80016d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b08      	cmp	r3, #8
 800159c:	d05c      	beq.n	8001658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d141      	bne.n	800162a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fd30 	bl	8001010 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fd2c 	bl	8001010 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e087      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	491b      	ldr	r1, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x478>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fd05 	bl	8001010 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fd01 	bl	8001010 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e05c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x416>
 8001628:	e054      	b.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_RCC_OscConfig+0x478>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fcee 	bl	8001010 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fcea 	bl	8001010 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e045      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x444>
 8001656:	e03d      	b.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e038      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000
 800166c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x4ec>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d028      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d121      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	3b01      	subs	r3, #1
 80016ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0cc      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d90c      	bls.n	8001720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b8      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800175a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	494d      	ldr	r1, [pc, #308]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d044      	beq.n	8001804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d119      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e067      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4934      	ldr	r1, [pc, #208]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff fc1c 	bl	8001010 <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff fc18 	bl	8001010 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e04f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d20c      	bcs.n	800182c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e032      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4916      	ldr	r1, [pc, #88]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186a:	f000 f821 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	490a      	ldr	r1, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	5ccb      	ldrb	r3, [r1, r3]
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fb7c 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08001b28 	.word	0x08001b28
 80018a8:	20000488 	.word	0x20000488
 80018ac:	2000048c 	.word	0x2000048c

080018b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b4:	b090      	sub	sp, #64	; 0x40
 80018b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
 80018bc:	2300      	movs	r3, #0
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d00d      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x40>
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	f200 80a1 	bhi.w	8001a1c <HAL_RCC_GetSysClockFreq+0x16c>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x34>
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x3a>
 80018e2:	e09b      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x184>)
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018e8:	e09b      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ee:	e098      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d028      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	099b      	lsrs	r3, r3, #6
 800190c:	2200      	movs	r2, #0
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	627a      	str	r2, [r7, #36]	; 0x24
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001918:	2100      	movs	r1, #0
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800191c:	fb03 f201 	mul.w	r2, r3, r1
 8001920:	2300      	movs	r3, #0
 8001922:	fb00 f303 	mul.w	r3, r0, r3
 8001926:	4413      	add	r3, r2
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800192a:	fba0 1202 	umull	r1, r2, r0, r2
 800192e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001930:	460a      	mov	r2, r1
 8001932:	62ba      	str	r2, [r7, #40]	; 0x28
 8001934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001936:	4413      	add	r3, r2
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	2200      	movs	r2, #0
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	61fa      	str	r2, [r7, #28]
 8001942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001946:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800194a:	f7fe fc45 	bl	80001d8 <__aeabi_uldivmod>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4613      	mov	r3, r2
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001956:	e053      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	2200      	movs	r2, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	617a      	str	r2, [r7, #20]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800196a:	f04f 0b00 	mov.w	fp, #0
 800196e:	4652      	mov	r2, sl
 8001970:	465b      	mov	r3, fp
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0159      	lsls	r1, r3, #5
 800197c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001980:	0150      	lsls	r0, r2, #5
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	ebb2 080a 	subs.w	r8, r2, sl
 800198a:	eb63 090b 	sbc.w	r9, r3, fp
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800199a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800199e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019a2:	ebb2 0408 	subs.w	r4, r2, r8
 80019a6:	eb63 0509 	sbc.w	r5, r3, r9
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	00eb      	lsls	r3, r5, #3
 80019b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b8:	00e2      	lsls	r2, r4, #3
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
 80019be:	eb14 030a 	adds.w	r3, r4, sl
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	eb45 030b 	adc.w	r3, r5, fp
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d6:	4629      	mov	r1, r5
 80019d8:	028b      	lsls	r3, r1, #10
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e0:	4621      	mov	r1, r4
 80019e2:	028a      	lsls	r2, r1, #10
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ea:	2200      	movs	r2, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	60fa      	str	r2, [r7, #12]
 80019f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f4:	f7fe fbf0 	bl	80001d8 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3740      	adds	r7, #64	; 0x40
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	017d7840 	.word	0x017d7840

08001a3c <__libc_init_array>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	4d0d      	ldr	r5, [pc, #52]	; (8001a74 <__libc_init_array+0x38>)
 8001a40:	4c0d      	ldr	r4, [pc, #52]	; (8001a78 <__libc_init_array+0x3c>)
 8001a42:	1b64      	subs	r4, r4, r5
 8001a44:	10a4      	asrs	r4, r4, #2
 8001a46:	2600      	movs	r6, #0
 8001a48:	42a6      	cmp	r6, r4
 8001a4a:	d109      	bne.n	8001a60 <__libc_init_array+0x24>
 8001a4c:	4d0b      	ldr	r5, [pc, #44]	; (8001a7c <__libc_init_array+0x40>)
 8001a4e:	4c0c      	ldr	r4, [pc, #48]	; (8001a80 <__libc_init_array+0x44>)
 8001a50:	f000 f844 	bl	8001adc <_init>
 8001a54:	1b64      	subs	r4, r4, r5
 8001a56:	10a4      	asrs	r4, r4, #2
 8001a58:	2600      	movs	r6, #0
 8001a5a:	42a6      	cmp	r6, r4
 8001a5c:	d105      	bne.n	8001a6a <__libc_init_array+0x2e>
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
 8001a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a64:	4798      	blx	r3
 8001a66:	3601      	adds	r6, #1
 8001a68:	e7ee      	b.n	8001a48 <__libc_init_array+0xc>
 8001a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a6e:	4798      	blx	r3
 8001a70:	3601      	adds	r6, #1
 8001a72:	e7f2      	b.n	8001a5a <__libc_init_array+0x1e>
 8001a74:	08001b40 	.word	0x08001b40
 8001a78:	08001b40 	.word	0x08001b40
 8001a7c:	08001b40 	.word	0x08001b40
 8001a80:	08001b44 	.word	0x08001b44

08001a84 <memcpy>:
 8001a84:	440a      	add	r2, r1
 8001a86:	4291      	cmp	r1, r2
 8001a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8001a8c:	d100      	bne.n	8001a90 <memcpy+0xc>
 8001a8e:	4770      	bx	lr
 8001a90:	b510      	push	{r4, lr}
 8001a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a9a:	4291      	cmp	r1, r2
 8001a9c:	d1f9      	bne.n	8001a92 <memcpy+0xe>
 8001a9e:	bd10      	pop	{r4, pc}

08001aa0 <memset>:
 8001aa0:	4402      	add	r2, r0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <memset+0xa>
 8001aa8:	4770      	bx	lr
 8001aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8001aae:	e7f9      	b.n	8001aa4 <memset+0x4>

08001ab0 <strstr>:
 8001ab0:	780a      	ldrb	r2, [r1, #0]
 8001ab2:	b570      	push	{r4, r5, r6, lr}
 8001ab4:	b96a      	cbnz	r2, 8001ad2 <strstr+0x22>
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d109      	bne.n	8001ad0 <strstr+0x20>
 8001abc:	460c      	mov	r4, r1
 8001abe:	4605      	mov	r5, r0
 8001ac0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f6      	beq.n	8001ab6 <strstr+0x6>
 8001ac8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001acc:	429e      	cmp	r6, r3
 8001ace:	d0f7      	beq.n	8001ac0 <strstr+0x10>
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	7803      	ldrb	r3, [r0, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ef      	bne.n	8001ab8 <strstr+0x8>
 8001ad8:	4618      	mov	r0, r3
 8001ada:	e7ec      	b.n	8001ab6 <strstr+0x6>

08001adc <_init>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	bf00      	nop
 8001ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae2:	bc08      	pop	{r3}
 8001ae4:	469e      	mov	lr, r3
 8001ae6:	4770      	bx	lr

08001ae8 <_fini>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	bf00      	nop
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr
 8001af4:	0000      	movs	r0, r0
	...

08001af8 <__update_sector_veneer>:
 8001af8:	f85f f000 	ldr.w	pc, [pc]	; 8001afc <__update_sector_veneer+0x4>
 8001afc:	200005e9 	.word	0x200005e9

Disassembly of section .data:

20000400 <dem>:
20000400:	00000001                                ....

20000404 <ESP32_AT>:
20000404:	0a0d5441 00000000                       AT......

2000040c <ESP32_MODE>:
2000040c:	432b5441 444f4d57 0d313d45 0000000a     AT+CWMODE=1.....

2000041c <ESP32_CWJAP>:
2000041c:	432b5441 50414a57 5046223d 6f532d54     AT+CWJAP="FPT-So
2000042c:	61777466 322d6572 222c2247 696d6441     ftware-2G","Admi
2000043c:	3032406e 0d223232 0000000a              n@2022".....

20000448 <ESP32_CIPSTART>:
20000448:	432b5441 54535049 3d545241 50435422     AT+CIPSTART="TCP
20000458:	31222c22 312e3239 322e3836 2c22392e     ","192.168.2.9",
20000468:	34333231 00000a0d                       1234....

20000470 <ESP32_CIPSEND>:
20000470:	432b5441 45535049 333d444e 00000a0d     AT+CIPSEND=3....

20000480 <SYST_CR>:
20000480:	e000e010                                ....

20000484 <SYST_RV>:
20000484:	e000e014                                ....

20000488 <SystemCoreClock>:
20000488:	00f42400                                .$..

2000048c <uwTickPrio>:
2000048c:	00000010                                ....

20000490 <uwTickFreq>:
20000490:	00000001                                ....

20000494 <Erase_Sector>:
{
20000494:	b480      	push	{r7}
20000496:	b087      	sub	sp, #28
20000498:	af00      	add	r7, sp, #0
2000049a:	4603      	mov	r3, r0
2000049c:	71fb      	strb	r3, [r7, #7]
	uint32_t* FLASH_SR = (uint32_t*)0x40023c0c;
2000049e:	4b21      	ldr	r3, [pc, #132]	; (20000524 <Erase_Sector+0x90>)
200004a0:	617b      	str	r3, [r7, #20]
	uint32_t* FLASH_CR = (uint32_t*)0x40023c10;
200004a2:	4b21      	ldr	r3, [pc, #132]	; (20000528 <Erase_Sector+0x94>)
200004a4:	613b      	str	r3, [r7, #16]
	while(((*FLASH_SR >> 16) & 1) == 1);// check Flash memory operation bit 16 BSY
200004a6:	bf00      	nop
200004a8:	697b      	ldr	r3, [r7, #20]
200004aa:	681b      	ldr	r3, [r3, #0]
200004ac:	0c1b      	lsrs	r3, r3, #16
200004ae:	f003 0301 	and.w	r3, r3, #1
200004b2:	2b00      	cmp	r3, #0
200004b4:	d1f8      	bne.n	200004a8 <Erase_Sector+0x14>
	if((*FLASH_CR >> 31) == 1) //check block
200004b6:	693b      	ldr	r3, [r7, #16]
200004b8:	681b      	ldr	r3, [r3, #0]
200004ba:	0fdb      	lsrs	r3, r3, #31
200004bc:	2b01      	cmp	r3, #1
200004be:	d107      	bne.n	200004d0 <Erase_Sector+0x3c>
		uint32_t* FLASH_KEYR = (uint32_t*)0x40023c04;
200004c0:	4b1a      	ldr	r3, [pc, #104]	; (2000052c <Erase_Sector+0x98>)
200004c2:	60fb      	str	r3, [r7, #12]
		*FLASH_KEYR = 0x45670123;
200004c4:	68fb      	ldr	r3, [r7, #12]
200004c6:	4a1a      	ldr	r2, [pc, #104]	; (20000530 <Erase_Sector+0x9c>)
200004c8:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
200004ca:	68fb      	ldr	r3, [r7, #12]
200004cc:	4a19      	ldr	r2, [pc, #100]	; (20000534 <Erase_Sector+0xa0>)
200004ce:	601a      	str	r2, [r3, #0]
	*FLASH_CR &= ~(0xf << 3);
200004d0:	693b      	ldr	r3, [r7, #16]
200004d2:	681b      	ldr	r3, [r3, #0]
200004d4:	f023 0278 	bic.w	r2, r3, #120	; 0x78
200004d8:	693b      	ldr	r3, [r7, #16]
200004da:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (sector << 3) | (0b1 << 1); // set erase bit 3
200004dc:	693b      	ldr	r3, [r7, #16]
200004de:	681b      	ldr	r3, [r3, #0]
200004e0:	79fa      	ldrb	r2, [r7, #7]
200004e2:	00d2      	lsls	r2, r2, #3
200004e4:	4313      	orrs	r3, r2
200004e6:	f043 0202 	orr.w	r2, r3, #2
200004ea:	693b      	ldr	r3, [r7, #16]
200004ec:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (0b1 << 16); // bit 16 on STRT of check
200004ee:	693b      	ldr	r3, [r7, #16]
200004f0:	681b      	ldr	r3, [r3, #0]
200004f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
200004f6:	693b      	ldr	r3, [r7, #16]
200004f8:	601a      	str	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1);
200004fa:	bf00      	nop
200004fc:	697b      	ldr	r3, [r7, #20]
200004fe:	681b      	ldr	r3, [r3, #0]
20000500:	0c1b      	lsrs	r3, r3, #16
20000502:	f003 0301 	and.w	r3, r3, #1
20000506:	2b00      	cmp	r3, #0
20000508:	d1f8      	bne.n	200004fc <Erase_Sector+0x68>
	*FLASH_CR &= ~(0b1 << 16);//bit 16 off STRT of check
2000050a:	693b      	ldr	r3, [r7, #16]
2000050c:	681b      	ldr	r3, [r3, #0]
2000050e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000512:	693b      	ldr	r3, [r7, #16]
20000514:	601a      	str	r2, [r3, #0]
}
20000516:	bf00      	nop
20000518:	371c      	adds	r7, #28
2000051a:	46bd      	mov	sp, r7
2000051c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000520:	4770      	bx	lr
20000522:	bf00      	nop
20000524:	40023c0c 	.word	0x40023c0c
20000528:	40023c10 	.word	0x40023c10
2000052c:	40023c04 	.word	0x40023c04
20000530:	45670123 	.word	0x45670123
20000534:	cdef89ab 	.word	0xcdef89ab

20000538 <Programming>:
{
20000538:	b480      	push	{r7}
2000053a:	b08b      	sub	sp, #44	; 0x2c
2000053c:	af00      	add	r7, sp, #0
2000053e:	60f8      	str	r0, [r7, #12]
20000540:	60b9      	str	r1, [r7, #8]
20000542:	607a      	str	r2, [r7, #4]
	uint32_t* FLASH_SR = (uint32_t*)0x40023c0c;
20000544:	4b23      	ldr	r3, [pc, #140]	; (200005d4 <Programming+0x9c>)
20000546:	61fb      	str	r3, [r7, #28]
	uint32_t* FLASH_CR = (uint32_t*)0x40023c10;
20000548:	4b23      	ldr	r3, [pc, #140]	; (200005d8 <Programming+0xa0>)
2000054a:	61bb      	str	r3, [r7, #24]
	while(((*FLASH_SR >> 16) & 1) == 1);// check Flash memory operation bit 16 BSY
2000054c:	bf00      	nop
2000054e:	69fb      	ldr	r3, [r7, #28]
20000550:	681b      	ldr	r3, [r3, #0]
20000552:	0c1b      	lsrs	r3, r3, #16
20000554:	f003 0301 	and.w	r3, r3, #1
20000558:	2b00      	cmp	r3, #0
2000055a:	d1f8      	bne.n	2000054e <Programming+0x16>
	if((*FLASH_CR >> 31) == 1) //check block
2000055c:	69bb      	ldr	r3, [r7, #24]
2000055e:	681b      	ldr	r3, [r3, #0]
20000560:	0fdb      	lsrs	r3, r3, #31
20000562:	2b01      	cmp	r3, #1
20000564:	d107      	bne.n	20000576 <Programming+0x3e>
		uint32_t* FLASH_KEYR = (uint32_t*)0x40023c04;
20000566:	4b1d      	ldr	r3, [pc, #116]	; (200005dc <Programming+0xa4>)
20000568:	617b      	str	r3, [r7, #20]
		*FLASH_KEYR = 0x45670123;
2000056a:	697b      	ldr	r3, [r7, #20]
2000056c:	4a1c      	ldr	r2, [pc, #112]	; (200005e0 <Programming+0xa8>)
2000056e:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
20000570:	697b      	ldr	r3, [r7, #20]
20000572:	4a1c      	ldr	r2, [pc, #112]	; (200005e4 <Programming+0xac>)
20000574:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (0b1 << 0);// set bit 1 PG
20000576:	69bb      	ldr	r3, [r7, #24]
20000578:	681b      	ldr	r3, [r3, #0]
2000057a:	f043 0201 	orr.w	r2, r3, #1
2000057e:	69bb      	ldr	r3, [r7, #24]
20000580:	601a      	str	r2, [r3, #0]
	char* temp_address = addr; //read address on  ram
20000582:	68fb      	ldr	r3, [r7, #12]
20000584:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < size; i++)
20000586:	2300      	movs	r3, #0
20000588:	623b      	str	r3, [r7, #32]
2000058a:	e013      	b.n	200005b4 <Programming+0x7c>
		*temp_address = data[i]; //  address on data
2000058c:	6a3b      	ldr	r3, [r7, #32]
2000058e:	68ba      	ldr	r2, [r7, #8]
20000590:	4413      	add	r3, r2
20000592:	781a      	ldrb	r2, [r3, #0]
20000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000596:	701a      	strb	r2, [r3, #0]
		while(((*FLASH_SR >> 16) & 1) == 1); // check bit 16 BSY
20000598:	bf00      	nop
2000059a:	69fb      	ldr	r3, [r7, #28]
2000059c:	681b      	ldr	r3, [r3, #0]
2000059e:	0c1b      	lsrs	r3, r3, #16
200005a0:	f003 0301 	and.w	r3, r3, #1
200005a4:	2b00      	cmp	r3, #0
200005a6:	d1f8      	bne.n	2000059a <Programming+0x62>
		temp_address++;
200005a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200005aa:	3301      	adds	r3, #1
200005ac:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < size; i++)
200005ae:	6a3b      	ldr	r3, [r7, #32]
200005b0:	3301      	adds	r3, #1
200005b2:	623b      	str	r3, [r7, #32]
200005b4:	6a3a      	ldr	r2, [r7, #32]
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	429a      	cmp	r2, r3
200005ba:	dbe7      	blt.n	2000058c <Programming+0x54>
	*FLASH_CR &= ~(0b1 << 0);
200005bc:	69bb      	ldr	r3, [r7, #24]
200005be:	681b      	ldr	r3, [r3, #0]
200005c0:	f023 0201 	bic.w	r2, r3, #1
200005c4:	69bb      	ldr	r3, [r7, #24]
200005c6:	601a      	str	r2, [r3, #0]
}
200005c8:	bf00      	nop
200005ca:	372c      	adds	r7, #44	; 0x2c
200005cc:	46bd      	mov	sp, r7
200005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200005d2:	4770      	bx	lr
200005d4:	40023c0c 	.word	0x40023c0c
200005d8:	40023c10 	.word	0x40023c10
200005dc:	40023c04 	.word	0x40023c04
200005e0:	45670123 	.word	0x45670123
200005e4:	cdef89ab 	.word	0xcdef89ab

200005e8 <update_sector>:
{
200005e8:	b580      	push	{r7, lr}
200005ea:	b082      	sub	sp, #8
200005ec:	af00      	add	r7, sp, #0
	*SYST_CR = 0;
200005ee:	4b0b      	ldr	r3, [pc, #44]	; (2000061c <update_sector+0x34>)
200005f0:	681b      	ldr	r3, [r3, #0]
200005f2:	2200      	movs	r2, #0
200005f4:	601a      	str	r2, [r3, #0]
	Erase_Sector(sector_0);
200005f6:	2000      	movs	r0, #0
200005f8:	f7ff ff4c 	bl	20000494 <Erase_Sector>
	Programming((void*)0x08000000, rx_buf, sizeof(rx_buf));
200005fc:	f241 4238 	movw	r2, #5176	; 0x1438
20000600:	4907      	ldr	r1, [pc, #28]	; (20000620 <update_sector+0x38>)
20000602:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
20000606:	f7ff ff97 	bl	20000538 <Programming>
	uint32_t* AIRCR = (uint32_t*)0xE000ED0C;// enable reset address
2000060a:	4b06      	ldr	r3, [pc, #24]	; (20000624 <update_sector+0x3c>)
2000060c:	607b      	str	r3, [r7, #4]
	*AIRCR = (0x5FA << 16) | (0b1 << 2);// on key bit 16 , enable bit 2 reset
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	4a05      	ldr	r2, [pc, #20]	; (20000628 <update_sector+0x40>)
20000612:	601a      	str	r2, [r3, #0]
}
20000614:	bf00      	nop
20000616:	3708      	adds	r7, #8
20000618:	46bd      	mov	sp, r7
2000061a:	bd80      	pop	{r7, pc}
2000061c:	20000480 	.word	0x20000480
20000620:	20000648 	.word	0x20000648
20000624:	e000ed0c 	.word	0xe000ed0c
20000628:	05fa0004 	.word	0x05fa0004
